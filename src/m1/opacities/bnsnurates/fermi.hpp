#ifndef BNSNURATES_FERMI_H
#define BNSNURATES_FERMI_H

#include <cmath>

#include "../../../athena.hpp"

// Approximates Fermi integrals following
// Takahashi, K., El Eid, M. F., Hillebrandt, W, A&A 67, 185 (1978)

#define ETA0 (1.0e-3)


namespace M1::Opacities::BNSNuRates::Fermi {


  //-----------------------------------------------------------------------
  // FERMI 2
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  //      REAL FUNCTION FERMI2P(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi2p(Real eta) {
    Real k21 = 3.2899;
    Real k22 = 1.8246;
    Real x = 1.0/eta;
    return (1.0/3.0 + k21*x*x)/(1.0 - exp(-k22*eta));
  }  
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  //      REAL FUNCTION FERMI2M(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi2m(Real eta) {
    Real a21 = 0.1092;
    Real a22 = 0.8908;
    return 2.0/(1.0 + a21*exp(a22*eta));
  } 
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  //      REAL FUNCTION FERMI2(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi2(Real eta) {
    if(eta>ETA0) {
      return (eta*eta*eta)*fermi2p(eta);
    } else {
      return exp(eta)*fermi2m(eta);
    } 
  }  
  //-----------------------------------------------------------------------

  
  //-----------------------------------------------------------------------
  // FERMI 3
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  //      REAL FUNCTION FERMI3P(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi3p(Real eta) {
    Real k31 = 4.9348;
    Real k32 = 11.3644;
    Real k33 = 1.9039;
    Real x = 1.0/eta;
    Real x2 = x*x;
    Real x4 = x2*x2;
    return (0.25 + k31*x2 + k32*x4)/(1.0 + exp(-k33*eta));
  }  
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  //      REAL FUNCTION FERMI3M(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi3m(Real eta) {
    Real a31 = 0.0559;
    Real a32 = 0.9069;
    return 6.0/(1.0 + a31*exp(a32*eta));
  }  
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  //      REAL FUNCTION FERMI3(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi3(Real eta) {
    if (eta>ETA0) {
      return (eta*eta*eta*eta)*fermi3p(eta);
    } else {
      return exp(eta)*fermi3m(eta);
    } 
  }  
  //-----------------------------------------------------------------------

  
  //-----------------------------------------------------------------------
  // FERMI 4
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  //  REAL FUNCTION FERMI4P(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi4p(Real eta) {
    Real k41 = 6.5797;
    Real k42 = 45.4576;
    Real k43 = 1.9484;
    Real x2 = 1.0/(eta*eta);
    Real x4 = x2*x2;
    return (0.2 + k41*x2 + k42*x4)/(1.0 - exp(-k43*eta));
  }  
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  //  REAL FUNCTION FERMI4M(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi4m(Real eta) {
    Real a41 = 0.0287;
    Real a42 = 0.9257;
    return 24.0/(1.0 + a41*exp(a42*eta));
  } 
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  //  REAL FUNCTION FERMI4(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi4(Real eta) {
    if (eta > ETA0) {
      return (eta*eta*eta*eta*eta)*fermi4p(eta);
    } else {
      return exp(eta)*fermi4m(eta);
    } 
  }  
  //-----------------------------------------------------------------------

  
  //-----------------------------------------------------------------------
  // FERMI 5
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  // REAL FUNCTION FERMI5P(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi5p(Real eta) {
    Real k51 = 8.2247;
    Real k52 = 113.6439;
    Real k53 = 236.5323;
    Real k54 = 1.9727;
    Real x2 = 1.0/(eta*eta);
    Real x4 = x2*x2;
    Real x6 = x4*x2;
    return (1.0/6.0 + k51*x2 + k52*x4 + k53*x6)/(1.0 + exp(-k54*eta));
  }  
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  //  REAL FUNCTION FERMI5M(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi5m(Real eta) {
    Real a51 = 0.0147;
    Real a52 = 0.9431;
    return 120.0/(1.0 + a51*exp(a52*eta));
  }  
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  // REAL FUNCTION FERMI5(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi5(Real eta) {
    if (eta > ETA0) {
      return (eta*eta*eta*eta*eta*eta)*fermi5p(eta);
    } else {
      return exp(eta)*fermi5m(eta);
    } 
  }  
  //-----------------------------------------------------------------------

  
  //-----------------------------------------------------------------------
  // FERMI Ratios
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  //      REAL FUNCTION FERMI4O2(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi4O2(Real eta) {
    if(eta > ETA0) {
      return eta*eta*fermi4p(eta)/fermi2p(eta);
    } else {
      return fermi4m(eta)/fermi2m(eta);
    } //END IF
  }  
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  // REAL FUNCTION FERMI4O3(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi4O3(Real eta) {
    if (eta > ETA0) {
      return eta*fermi4p(eta)/fermi3p(eta);
    } else {
      return fermi4m(eta)/fermi3m(eta);
    } 
  }  
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  // REAL FUNCTION FERMI5O3(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi5O3(Real eta) {
    if (eta > ETA0) {
      return eta*eta*fermi5p(eta)/fermi3p(eta);
    } else {
      return fermi5m(eta)/fermi3m(eta);
    } 
  }  
  //-----------------------------------------------------------------------
  
  //-----------------------------------------------------------------------
  // REAL FUNCTION FERMI5O4(ETA)
  //-----------------------------------------------------------------------
  inline Real fermi5O4(Real eta) {
    if (eta > ETA0) {
      return eta*fermi5p(eta)/fermi4p(eta);
    } else {
      return fermi5m(eta)/fermi4m(eta);
    } 
  }  
  //-----------------------------------------------------------------------
  

} // namespace BNSNuRates

#undef ETA0

#endif
